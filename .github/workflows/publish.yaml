name: Publish

# The purpose of this job is to watch `release-*` branches for the term 
# "automatically-tag-and-release-this-commit" within merged PRs/commits. Once
# that term is found the current version of `Cargo.toml` is used to create a
# tag and the tag is pushed to the repo.
# 
# Currently the tag is created through the GitHub API with an access token to
# ensure that CI is further triggered for the tag itself which performs the
# full release process.
#
# Note that this depends on the `ci-status` step above which is the "join"
# point of this workflow for when everything succeeds. the purpose of that is
# so that the tag is only created after the aftifacts have been uploaded for
# this workflow as the `publish-artifacts.yml` workflow will download these
# artifacts and then publish them to the tag.

# if: ${{ github.event.head_commit.message }} contains '[tag-and-release]'

on:
  workflow_dispatch:
    # inputs:
    #   action:
    #     description: The release action to take.
    #     default: create
    #     type: choice
    #     options:
    #       - create
    #       - release
    #       - patch

jobs:
  tag:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - name: Set git identity
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor_id }}+${{ github.actor }}@users.noreply.github.com"

      - uses: ./.github/actions/latest-release
        id: latest

      # Move to the latest release branch, update the release date and commit.
      # `[tag-and-release]` in the commit message triggers the publish workflow.
      - name: Update release notes
        id: notes
        run: |
          set -ex
          git fetch origin
          git reset --hard origin/${{ steps.latest.outputs.branch }}
          sed -i "s/^Unreleased/Released $(date +'%Y-%m-%d')/" RELEASES.md
          git commit --allow-empty -am "Release ${{ steps.latest.outputs.branch }}"
          git push origin HEAD:${{ steps.latest.outputs.branch }}

          notes=$(cat RELEASES.md)
          echo "version=$version" >> $GITHUB_OUTPUT
          echo "release_notes=$notes" >> $GITHUB_OUTPUT

      - name: Bump version and push tag
        id: tag
        uses: mathieudutour/github-tag-action@v6.2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          custom_tag: v${{ steps.latest.outputs.version }}
      
      - run: |
          echo "${{ steps.tag.outputs.changelog }}"

      - name: Create a GitHub release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ steps.tag.outputs.new_tag }}
          name: Release ${{ steps.tag.outputs.new_tag }}
          body: ${{ steps.notes.outputs.release_notes }}

      # - name: Test if tag is needed
      #   id: tag
      #   run: |
      #     git log ${{ github.event.before }}...${{ github.event.after }} | tee main.log
      #     version=$(grep '^version =' Cargo.toml | head -n 1 | sed 's/.*"\(.*\)"/\1/')
      #     echo "version: $version"
      #     echo "version=$version" >> $GITHUB_OUTPUT
      #     echo "sha=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
      #     if grep -q "tag-and-release" main.log; then
      #       echo push-tag
      #       echo "push_tag=yes" >> $GITHUB_OUTPUT
      #     else
      #       echo no-push-tag
      #       echo "push_tag=no" >> $GITHUB_OUTPUT
      #     fi
          

      # - name: Push the tag
      #   run: |
      #     git_refs_url=$(jq .repository.git_refs_url $GITHUB_EVENT_PATH | tr -d '"' | sed 's/{\/sha}//g')
      #     curl -iX POST $git_refs_url \
      #       -H "Authorization: token ${{ secrets.PERSONAL_ACCESS_TOKEN }}" \
      #       -d @- << EOF
      #     {
      #       "ref": "refs/tags/v${{ steps.tag.outputs.version }}",
      #       "sha": "${{ steps.tag.outputs.sha }}"
      #     }
      #     EOF
      #     if: steps.tag.outputs.push_tag == 'yes'